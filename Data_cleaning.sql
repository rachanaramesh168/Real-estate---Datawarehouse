--AUTHORS
--AMALA RICHU ALBERT AROCKIARAJ 29949270
--RACHANA RAMESH 29905257
--FIT5195 MAJOR ASSIGNMENT
--SQL STATEMENTS FOR DATA CLEANING


/* DROPPING TABLES */
DROP TABLE ADDRESS;
DROP TABLE ADVERTISEMENT;
DROP TABLE AGENT;
DROP TABLE AGENT_OFFICE;
DROP TABLE CLIENT;
DROP TABLE CLIENT_WISH;
DROP TABLE FEATURE;
DROP TABLE OFFICE;
DROP TABLE PERSON;
DROP TABLE POSTCODE;
DROP TABLE PROPERTY;
DROP TABLE PROPERTY_ADVERT;
DROP TABLE PROPERTY_FEATURE;
DROP TABLE RENT;
DROP TABLE SALE;
DROP TABLE STATE;
DROP TABLE VISIT;

/* COPYING THE TABLES TO LOCAL */

CREATE TABLE ADDRESS AS
    SELECT * FROM MONRE.ADDRESS;
    
CREATE TABLE Advertisement AS
    SELECT * FROM MONRE.Advertisement;
    
CREATE TABLE Agent AS
    SELECT * FROM MONRE.Agent;
    
CREATE TABLE Agent_Office AS
    SELECT * FROM MONRE.Agent_Office;
    
CREATE TABLE Client AS
    SELECT * FROM MONRE.Client;
    
CREATE TABLE Client_Wish AS
    SELECT * FROM MONRE.Client_Wish;
    
CREATE TABLE Feature AS
    SELECT * FROM MONRE.Feature;
    
CREATE TABLE Office AS
    SELECT * FROM MONRE.Office;
    
CREATE TABLE Person AS
    SELECT * FROM MONRE.Person;
    
CREATE TABLE Postcode AS
    SELECT * FROM MONRE.Postcode;
    
CREATE TABLE Property AS
    SELECT * FROM MONRE.Property;  
    
CREATE TABLE Property_Advert AS
    SELECT * FROM MONRE.Property_Advert;  
    
CREATE TABLE Property_Feature AS
    SELECT * FROM MONRE.Property_Feature; 
    
CREATE TABLE Rent AS
    SELECT * FROM MONRE.Rent; 
    
CREATE TABLE Sale AS
    SELECT * FROM MONRE.Sale; 
    
CREATE TABLE State AS
    SELECT * FROM MONRE.State; 
    
CREATE TABLE Visit AS
    SELECT * FROM MONRE.Visit; 

/* CHECKING FOR DUPLICATE RECORDS */
SELECT COUNT(*) FROM ADDRESS GROUP BY ADDRESS_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM ADVERTISEMENT GROUP BY ADVERT_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM AGENT GROUP BY PERSON_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM AGENT_OFFICE GROUP BY PERSON_ID,OFFICE_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM CLIENT GROUP BY PERSON_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM CLIENT_WISH GROUP BY PERSON_ID,FEATURE_CODE HAVING COUNT(*) >1;

SELECT COUNT(*) FROM FEATURE GROUP BY FEATURE_CODE HAVING COUNT(*) >1;

SELECT COUNT(*) FROM OFFICE GROUP BY OFFICE_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM PERSON GROUP BY PERSON_ID HAVING COUNT(*) >1;

SELECT PERSON_ID FROM PERSON GROUP BY PERSON_ID HAVING COUNT(*) >1;

SELECT * FROM PERSON WHERE PERSON_ID=6995;

SELECT COUNT(*) FROM POSTCODE GROUP BY POSTCODE HAVING COUNT(*) >1;

SELECT COUNT(*) FROM PROPERTY GROUP BY PROPERTY_ID HAVING COUNT(*) >1;

SELECT PROPERTY_ID FROM PROPERTY GROUP BY PROPERTY_ID HAVING COUNT(*) >1;

SELECT * FROM PROPERTY WHERE PROPERTY_ID IN (6177, 6179) ORDER BY PROPERTY_ID;

SELECT * FROM PROPERTY WHERE PROPERTY_ID IN (6177, 6179) ORDER BY PROPERTY_ID;

SELECT COUNT(*) FROM PROPERTY_ADVERT GROUP BY PROPERTY_ID,ADVERT_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM PROPERTY_FEATURE GROUP BY PROPERTY_ID,FEATURE_CODE HAVING COUNT(*) >1;

SELECT COUNT(*) FROM RENT GROUP BY RENT_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM SALE GROUP BY SALE_ID HAVING COUNT(*) >1;

SELECT COUNT(*) FROM STATE GROUP BY STATE_CODE HAVING COUNT(*) >1;

SELECT COUNT(*) FROM VISIT GROUP BY CLIENT_PERSON_ID,AGENT_PERSON_ID,PROPERTY_ID HAVING COUNT(*) >1;

/* CHECKING FOR NULL RECORDS */
--IN SALE
SELECT * FROM SALE;
SELECT * FROM SALE WHERE SALE_ID IS NULL;
SELECT * FROM SALE WHERE PRICE IS NULL;
SELECT * FROM SALE WHERE AGENT_PERSON_ID IS NULL;
SELECT * FROM SALE WHERE SALE_DATE IS NULL;
SELECT * FROM SALE WHERE PROPERTY_ID IS NULL;

--IN RENT
SELECT * FROM RENT WHERE RENT_ID IS NULL;
SELECT * FROM RENT WHERE AGENT_PERSON_ID IS NULL;
SELECT * FROM RENT WHERE PROPERTY_ID IS NULL;
SELECT * FROM RENT WHERE PRICE IS NULL;

-- IN PROPERTY
SELECT * FROM PROPERTY WHERE PROPERTY_ID IS NULL;
SELECT * FROM PROPERTY WHERE PROPERTY_DATE_ADDED IS NULL;
SELECT * FROM PROPERTY WHERE ADDRESS_ID IS NULL;
SELECT * FROM PROPERTY WHERE PROPERTY_TYPE IS NULL;
SELECT * FROM PROPERTY WHERE PROPERTY_NO_OF_BEDROOMS IS NULL;
SELECT * FROM PROPERTY WHERE PROPERTY_NO_OF_BATHROOMS IS NULL;
SELECT * FROM PROPERTY WHERE PROPERTY_NO_OF_GARAGES IS NULL;

--PERSON
SELECT * FROM PERSON WHERE TITLE IS NULL OR LENGTH(TRIM(TITLE)) = 0 OR TITLE='NULL' OR TITLE = 'Null' OR TITLE = 'null'; 
SELECT * FROM PERSON WHERE FIRST_NAME IS NULL OR LENGTH(TRIM(FIRST_NAME)) = 0 OR FIRST_NAME='NULL'
OR FIRST_NAME = 'Null' or FIRST_NAME = 'null'; 
SELECT * FROM PERSON WHERE LAST_NAME IS NULL OR LENGTH(TRIM(LAST_NAME)) = 0 OR LAST_NAME='NULL'
OR LAST_NAME = 'Null' or LAST_NAME = 'null'; 
SELECT * FROM PERSON WHERE GENDER IS NULL OR LENGTH(TRIM(GENDER)) = 0 OR GENDER='NULL'; 
SELECT * FROM PERSON WHERE EMAIL IS NULL OR LENGTH(TRIM(EMAIL)) = 0 OR EMAIL='NULL'; 
SELECT * FROM PERSON WHERE PHONE_NO IS NULL OR LENGTH(TRIM(PHONE_NO)) != 10 OR PHONE_NO='NULL'; 
SELECT * FROM PERSON WHERE PERSON_ID = NULL;
SELECT * FROM PERSON WHERE ADDRESS_ID = NULL;


--ADDRESS
SELECT * FROM ADDRESS WHERE ADDRESS_ID IS NULL;
SELECT * FROM ADDRESS WHERE STREET IS NULL OR LENGTH(TRIM(STREET)) = 0 
OR STREET='NULL' OR STREET = 'Null' or STREET = 'null'; 
SELECT * FROM ADDRESS WHERE SUBURB IS NULL OR LENGTH(TRIM(SUBURB)) = 0 
OR SUBURB='NULL' OR SUBURB = 'Null' or SUBURB = 'null';
SELECT * FROM POSTCODE WHERE POSTCODE IS NULL;

--ADVERTISMENT

SELECT * FROM ADVERTISEMENT WHERE ADVERT_ID IS NULL;
SELECT * FROM ADVERTISEMENT WHERE ADVERT_NAME IS NULL 
OR LENGTH(TRIM(ADVERT_NAME)) = 0 OR ADVERT_NAME='NULL'
OR ADVERT_NAME = 'Null' or ADVERT_NAME = 'null';

--AGENT

SELECT * FROM AGENT WHERE PERSON_ID IS NULL;
SELECT * FROM AGENT WHERE SALARY IS NULL;
SELECT * FROM AGENT WHERE SALARY = 0;

-- AGENT OFFICE

SELECT * FROM AGENT_OFFICE WHERE PERSON_ID IS NULL;
SELECT * FROM AGENT_OFFICE WHERE OFFICE_ID IS NULL;

-- CLIENT

SELECT * FROM CLIENT WHERE PERSON_ID IS NULL;
SELECT * FROM CLIENT WHERE MIN_BUDGET IS NULL;
SELECT * FROM CLIENT WHERE MAX_BUDGET IS NULL;

-- CLIENT WISH

SELECT * FROM CLIENT_WISH WHERE FEATURE_CODE IS NULL;
SELECT * FROM CLIENT_WISH WHERE PERSON_ID IS NULL;

--FEATURE

SELECT * FROM FEATURE WHERE FEATURE_DESCRIPTION IS NULL 
OR LENGTH(TRIM(FEATURE_DESCRIPTION)) = 0 
OR FEATURE_DESCRIPTION='NULL' OR FEATURE_DESCRIPTION = 'Null' 
OR FEATURE_DESCRIPTION = 'null'; 
SELECT * FROM FEATURE WHERE FEATURE_CODE = NULL;

--OFFICE

SELECT * FROM OFFICE WHERE OFFICE_NAME IS NULL OR LENGTH(TRIM(OFFICE_NAME)) = 0 
OR OFFICE_NAME='NULL' OR OFFICE_NAME = 'Null' 
OR OFFICE_NAME = 'null'; 
SELECT * FROM OFFICE WHERE OFFICE_ID = NULL;

--POSTCODE

SELECT * FROM POSTCODE WHERE STATE_CODE IS NULL OR LENGTH(TRIM(STATE_CODE)) = 0 
OR STATE_CODE='NULL' OR STATE_CODE = 'Null' 
OR STATE_CODE = 'null'; 
SELECT * FROM POSTCODE WHERE POSTCODE IS NULL;

--PROPERTY_ADVERT

SELECT * FROM PROPERTY_ADVERT WHERE PROPERTY_ID IS NULL;
SELECT * FROM PROPERTY_ADVERT WHERE ADVERT_ID IS NULL;
SELECT * FROM PROPERTY_ADVERT WHERE AGENT_PERSON_ID IS NULL;
SELECT * FROM PROPERTY_ADVERT WHERE COST IS NULL;

--PROPERTY_FEATURE

SELECT * FROM PROPERTY_FEATURE WHERE PROPERTY_ID IS NULL OR FEATURE_CODE IS NULL;

--VISIT

SELECT * FROM VISIT WHERE CLIENT_PERSON_ID IS NULL;
SELECT * FROM VISIT WHERE AGENT_PERSON_ID IS NULL;
SELECT * FROM VISIT WHERE PROPERTY_ID IS NULL;
SELECT * FROM VISIT WHERE VISIT_DATE IS NULL;
SELECT * FROM VISIT WHERE DURATION IS NULL;

--STATE
SELECT * FROM STATE WHERE STATE_CODE IS NULL;

-- CHECKING FOR ILLEGAL RECORDS

/*FINDING POSTCODES THAT ARE NOT IN POSTCODE TABE */
SELECT * FROM ADDRESS WHERE POSTCODE NOT IN 
(SELECT POSTCODE FROM POSTCODE);

/*FINDING RECORDS IN PERSON TABLE WHICH DOES NOT HAVE MATCHING ADDRESS_ID IN ADDRESS TABLE */
SELECT * FROM PERSON WHERE ADDRESS_ID NOT IN
(SELECT ADDRESS_ID FROM ADDRESS);  --- 1 RECORD FOUND

/* FINDING PROPERTY RECORDS WHICH DOES NOT HAVE MATCHING RECORDS IN ADDRESS TABLE */
SELECT * FROM PROPERTY WHERE ADDRESS_ID NOT IN
(SELECT ADDRESS_ID FROM ADDRESS);

/*FINDING PROPERTY ADVERTISEMENTS WHICH DOES NOT HAVE MATCHING RECORD IN ADV TABLE */
SELECT * FROM PROPERTY_ADVERT WHERE ADVERT_ID NOT IN
(SELECT ADVERT_ID FROM ADVERTISEMENT);

/*FINDING AGENT OFFICE WITH NON MATCHING RECORDS IN AGENT TABLE */
SELECT * FROM AGENT_OFFICE WHERE PERSON_ID NOT IN 
(SELECT PERSON_ID FROM AGENT);

/* FINDING AGENT OFFICE RECORDS WITH NON MATCHING OFFICE_ID IN OFFICE TABLE */
SELECT * FROM AGENT_OFFICE WHERE OFFICE_ID NOT IN
(SELECT OFFICE_ID FROM OFFICE);

/*FINDING CLIENT WISH WITH NON MATCHING FEATURE RECORDS IN FEATURE TABLE */
SELECT * FROM CLIENT_WISH WHERE FEATURE_CODE NOT IN 
(SELECT FEATURE_CODE FROM FEATURE);

/*FINDING CLIENT WISH WITH NON MATCHING CLIENT RECORDS IN CLIENT TABLE */
SELECT * FROM CLIENT_WISH WHERE PERSON_ID NOT IN 
(SELECT PERSON_ID FROM CLIENT);

/*FINDING AGENT RECORDS WHICH DOES NOT HAVE ANY ENTRY IN PERSON TABLE */
SELECT PERSON_ID,COUNT(PERSON_ID) FROM AGENT WHERE PERSON_ID NOT IN 
(SELECT PERSON_ID FROM PERSON) GROUP BY PERSON_ID; -- 1 FOUND

SELECT PERSON_ID,COUNT(PERSON_ID) FROM AGENT WHERE PERSON_ID NOT IN 
(SELECT PERSON_ID FROM PERSON) GROUP BY PERSON_ID;

/*FINDING CLIENT RECORDS WHICH DOES NOT HAVE ANY ENTRY IN PERSON TABLE */
SELECT PERSON_ID,COUNT(PERSON_ID) FROM CLIENT WHERE PERSON_ID NOT IN 
(SELECT PERSON_ID FROM PERSON) GROUP BY PERSON_ID; -- 1 FOUND

SELECT * FROM PERSON WHERE PERSON_ID = 7000;
SELECT * FROM CLIENT WHERE PERSON_ID = 7000;

/*FINDING AGENT RECORDS IN CLIENT WISH WHICH DOES NOT HAVE ANY ENTRY IN PERSON TABLE */
SELECT PERSON_ID,COUNT(PERSON_ID) FROM CLIENT_WISH WHERE PERSON_ID NOT IN 
(SELECT PERSON_ID FROM PERSON) GROUP BY PERSON_ID;

/*FINDING AGENTS WHO ARE IN PROPERTY ADVERT TABLE AND NOT IN AGENT TABLE */
SELECT * FROM PROPERTY_ADVERT WHERE AGENT_PERSON_ID NOT IN 
(SELECT PERSON_ID FROM AGENT);

/* FINDING PROPERTIES THAT ARE IN RENT BUT NOT IN PROPERTY TABLE */
SELECT * FROM RENT WHERE PROPERTY_ID NOT IN 
(SELECT PROPERTY_ID FROM PROPERTY);

/* FINDING THE PERSON ID PRESENT IN RENT TABLE THAT IS NOT AVAILABLE IN AGENT TABLE */ 
SELECT * FROM RENT WHERE AGENT_PERSON_ID NOT IN 
(SELECT PERSON_ID FROM AGENT); -- 1 RECORD FOUND

/* FINDING THE PERSON ID PRESENT IN RENT TABLE THAT IS NOT AVAILABLE IN CLIENT TABLE */
SELECT * FROM RENT WHERE CLIENT_PERSON_ID NOT IN 
(SELECT PERSON_ID FROM CLIENT); -- 1 RECORD, DELETING IT

/* CHECKING IF THE RENT START DATE IS GREATER THAN THE RENT END DATE */
SELECT * FROM RENT WHERE RENT_START_DATE > RENT_END_DATE; -- 1 RECORD

/* FINDING PROPERTIES THAT ARE ADVERTISED BUT NOT IN PROPERTY TABLE */
SELECT * FROM PROPERTY_ADVERT WHERE PROPERTY_ID NOT IN
(SELECT PROPERTY_ID FROM PROPERTY);

/* FINDING PROPERTIES THAT ARE IN PROP_FEATURE BUT NOT IN PROPERTY TABLE */
SELECT * FROM PROPERTY_FEATURE WHERE PROPERTY_ID NOT IN 
(SELECT PROPERTY_ID FROM PROPERTY);

/* FINDING PROPERTIES THAT ARE SOLD WHICH ARE NOT IN PROPERTY TABLE */
SELECT * FROM SALE WHERE PROPERTY_ID NOT IN 
(SELECT PROPERTY_ID FROM PROPERTY);

/*FINDING PROPERTIES THAT ARE VISITED BUT ARE NOT IN PROPERTY TABLE */
SELECT * FROM VISIT WHERE PROPERTY_ID NOT IN 
(SELECT PROPERTY_ID FROM PROPERTY);

/*FINDING AGENTS WHO VISITED BUT ARE NOT IN AGENT TABLE */
SELECT * FROM VISIT WHERE AGENT_PERSON_ID NOT IN
(SELECT PERSON_ID FROM AGENT); -- 1 RECORD FOUND DELETE IT

/* FINDING CLIENTS WHO VISITED BUT ARE NOT IN CLIENT TABLE */
SELECT * FROM VISIT WHERE CLIENT_PERSON_ID NOT IN 
(SELECT PERSON_ID FROM CLIENT); -- 1 RECORD FOUND

/* FINDING STATECODES THAT ARE NOT IN POSTCODE TABLE */
SELECT * FROM POSTCODE WHERE STATE_CODE NOT IN 
(SELECT STATE_CODE FROM STATE);

/*FINDING AGENTS THAT ARE IN SALE BUT NOT IN AGENT TABLE */
SELECT * FROM SALE WHERE AGENT_PERSON_ID NOT IN
(SELECT PERSON_ID FROM AGENT);

/*FINDING CLIENTS THAT ARE IN SALE BUT NOT IN CLIENT TABLE */
SELECT * FROM SALE WHERE CLIENT_PERSON_ID NOT IN 
(SELECT PERSON_ID FROM CLIENT);

/*FINDING PROPERTIES THAT ARE IN SALE BUT NOT IN PROPERTY TABLE */
SELECT * FROM SALE WHERE PROPERTY_ID NOT IN 
(SELECT PROPERTY_ID FROM PROPERTY);

/* CHECKING IF THE MINIMUM BUDGET IS GREATER THAN THE MAXIMUM BUDGET */
SELECT * FROM CLIENT WHERE MIN_BUDGET > MAX_BUDGET; -- 3 RECORDS

/* CHECKING IF THERE MINIMUM BUDGET IS NEGATIVE */
SELECT * FROM CLIENT WHERE MIN_BUDGET < 0;

/* CHECKING IF THE MAX BUDGET IS LESS THAN 0 */
SELECT * FROM CLIENT WHERE MAX_BUDGET < 0; -- 1 RECORD

/* CHECKING IF A PROPERTY IS IN SALE TABLE BEFORE THE THE PROPERTY WAS ADDED IN THE PROPERTY TABLE */
SELECT P.PROPERTY_ID, P.PROPERTY_DATE_ADDED, S.SALE_DATE
FROM PROPERTY P, SALE S
WHERE P.PROPERTY_ID = S.PROPERTY_ID
AND S.SALE_DATE < P.PROPERTY_DATE_ADDED;

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 3000 AND 3999
AND STATE_CODE NOT IN ('VIC');

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 4000 AND 4999
AND STATE_CODE NOT IN ('QLD');

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 5000 AND 5999
AND STATE_CODE NOT IN ('SA');

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 6000 AND 6999
AND STATE_CODE NOT IN ('WA');

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 2000 AND 2599
AND POSTCODE BETWEEN 2619 AND 2898
AND POSTCODE BETWEEN 2921 AND 2999
AND STATE_CODE NOT IN ('NSW');

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 2600 AND 2618
AND POSTCODE BETWEEN 2900 AND 2920
AND STATE_CODE NOT IN ('ACT');

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 7000 AND 7799
AND STATE_CODE NOT IN ('TAS');

/*CHECKING IF THE POSTCODES ARE IN CORRECT RANGE */
SELECT * FROM POSTCODE WHERE POSTCODE BETWEEN 0800 AND 0899
AND STATE_CODE NOT IN ('NT');

/* CHECKING IF THE GENDER IS RIGHT */
SELECT * FROM PERSON WHERE GENDER NOT IN ('Male', 'Female');

/*CHECK PHONE NUM */
SELECT * FROM PERSON WHERE LENGTH(PHONE_NO) > 10;

/* CLEANING THE DATA */

/* DELETING DUPLICATE RECORDS IN PERSON*/
DELETE FROM PERSON
WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM PERSON GROUP BY PERSON_ID);

/* DELETING DUPLICATE RECORDS FROM PROPERTY TABLE*/
DELETE FROM PROPERTY
WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM PROPERTY GROUP BY PROPERTY_ID);

/* DELETING NULL RECORDS FROM PERSON TABLE*/
DELETE FROM PERSON WHERE TITLE = 'null';
DELETE FROM PERSON WHERE LENGTH(TRIM(PHONE_NO)) != 10;
DELETE FROM STATE WHERE STATE_CODE IS NULL;

/* DELETING INVALID AGENT RECORD */
DELETE FROM AGENT WHERE PERSON_ID = 6997;
select * from agent where person_id=6997;
DELETE FROM AGENT WHERE PERSON_ID = 1536;
select * from agent where person_id=1536;

/* DELETING INVALID CLIENT RECORD */
DELETE FROM CLIENT WHERE PERSON_ID = 7000;
select * from client where person_id=7000;


/* DELETING THE INCORRECT RECORD - RECORD WHICH HAS INCORRECT AGENT, CLIENT AND START DATE BIGGER THAN END DATE */
DELETE FROM RENT WHERE RENT_ID = 3284;
select * from rent where rent_id=3284;

/* DELETING INCORRECT RECORD FROM VISIT */
SELECT * FROM VISIT WHERE CLIENT_PERSON_ID = 6000;
DELETE FROM VISIT WHERE CLIENT_PERSON_ID = 6000;
SELECT * FROM VISIT WHERE CLIENT_PERSON_ID = 6000;

/* DELETING RECORDS IN CLIENT TABLE WHERE MINIMUM BUDGET IS SMALLER THAN MAX BUDGET */
DELETE FROM CLIENT WHERE PERSON_ID IN (5900, 5901, 5902);
select * from client where PERSON_ID IN (5900, 5901, 5902);